Rx java vs Flow-------------------------------------------------------------------------------------
فایل dao تفاوت هایی داره توی دو تا پروژه
قراره توی این پروژه از ترکیب flow / coroutine / live data استفاده کنیم به جای Rx
پس
1-
تمام متدهای کلاس dao به suspend fun تبدیل میشن
ولی کاستوم کوءری ها را به یک روش دیگر هندل میکنیم و نیازی به ساسپند نیست
2-
قبلا خروجی متدها یک سریشون از جنس completable بود که کلا تبدیل میشن به unit
اونا که از جنس Observable<> بود تبدیل میشن به Flow<>
چرا از فلو استفاده میکنیم؟
یادآوری: فلو حالتی بود که جریان اطلاعات را برای من پیاده سازی میکرد
آپدیت شدن خودکار حالت خالی و پر و...
جلوتر با حالت لایو دیتا ترکیب میکنیم که خیلی عالی میشه

Binding---------------------------------------------------------------------------------------------
توی این پروژه میخوایم ار یک روش دیگه برای بایندینگ ها استفاده کنیم
 به هر دلیلی ممکنه ما لایف سایکل صفحه مون (اکتیویتی یا فرگمنت) رو از دست بدیم
 ما میخوایم توی این حالت بایندینگ را نال کنیم
 در این حالت هم رم خالی میشه
 هم ویوهای من از دسترس خارج میشن
 این حال جزو bets practise ها به حساب میاد

 قبلا lateinit تعریف میکردیم بایندینگ رو
 حالا میایم nullable تعریف میکنیم و توی onDestroy یا هر جای دیگه از لایف سایکل که مد نظرمون هست null ش میکنیم

 حالا توی setContentView(binding.root) به مشکل میخوریم
 به خاطر null safety
 میشه با علامت تعجب و اینا کنترلش کرد ولی بهترین حالت چیه؟
 کنترل کردنش با یک متغیر دیگه
 که آخرین وضعیت این باندینگ رو داخل این متغیر بریزیم و با این حالت کنترلش کنیم
 مثل حالت temp ما به حساب میاد
 برای این کار میایم اون بایندینگ رو قبل اسمش یک آندرلاین میذاریم
 حالا یک متغیر بایندینگ دیگه تعریف میکنیم و با getter setter های خود کاتلین
 آخرین state متغیر بایندینگ با آندرلاین رو میریزیم توش
 که همیشه دیگه از این استفاده کنیم
 در نتیجه وقتی مثلا در onDestroy میایم _binding رو null میکنیم آخرین state ش که null هست داخل binding هم ریخته میشه
 میایم inflater رو هم داخا بایندینگ آندرلاین دار میریزیم
 داخل setContentView هم از getter ایندینگ استفاده میکنیم با در نظر گرفتن null safety
 موقع استفاده از binding.apply هم برای null safety یک ? میذاریم که null ببودن باعث کرش و اینا نشه

ViewModel-------------------------------------------------------------------------------------------
دیتای مربوط به اسپینرها باید داخل ویومدل هندل شه چون لاجیک محسوب میشه
دیتا ها همه در اختیار ویومدل هستن
( توی mvp دیتاهای اسپینرها داخل خود فرگمنت هندل میشد)

***  اگر by viewModels را توی پروژه تون نشناخت برید دپدنسی های مربوط به نویگیشن را به پروژه اضافه کنید درست میشه ***

Extensions------------------------------------------------------------------------------------------
چه زمانی از اکستنشن ها استفاده میکنیم؟
زمانی که از یک چیزی بیش از یک بار استفاده میکنیم و میبینیم که مشترکه خیلی جاها
تقریبا معادل همون کلاس های tools که مینویسیم میشن

میخوایم پر کردن اسپنیرها رو با اکستنشن بنویسیم
میخوایم روی چه چیزی اعمال شه کدمون؟ روی اسپینر
مهم ترین چیزی که قراره اون اکستنشن فانکشن ما روش اعمال شه در واقع این اسپینر هست
بعد اسم اکستنشنمون رو در نظر میگیریم
شروع میکنیم آداپتر مربوط به اسپینر رو بنویسیم
به چند تا چیز نیاز داره این آداپتر
اولی کانتکس
دوم لایه xml
سوم لیست
*** زمانی که ما یک اکستنشن را روی یک ویو مینویسیم خیلی راحت به کانتکسش هم دسترسی داریم ***
برای لایه توی فود اپ خودمون کاسنومایز کردیم
توی نوت اپ از لایه های دیفالت اندروید استفاده کردیم
لیست رو نیاز داریم که در ورودی از کاربر بگیریم
به همین ترتیب آداپتر و دراپ داون اسپینر را تعریف میکنیم و مینویسیم
بعد میرسیم به اینترفیس هاش

اکستنشن نویسی با لامبدا فانکشن:
ما نیاز که یک چیز کال بک مانند داریم
که مثلا آیتمی که توسط این اسپینر انتخاب میشه برگرده به اکتیویتی یا فرگمنتمون
 یک راهش استفاده از اینترفیس هاست که یکم کار اضافه ایه
 بری اینترفیس را بیرون تعریف کنی - ازش ارث بری کنی ....
 ولی با استفاده از لامبدا فانکشن میتونیم اون چیزی که نیار داریم را بفرستیم به هر جا
 توی آداپتر هم برای کلیک لیسنر ها همین کار را کردیم
 عملا فانکشن را به عنوان یک پارامتر ورودی میفرستیم داخل متد... مثل فلاتر
 name : (پارامترهای ورودی) -> returnType

 صدا زدن در مقصد:
 name(پارامتر وردی )

 ساختن در مبدا:
 functionName(پارامترهای عادی) { پارامتر ورودی لامبدا -> lambdaBodyWithoutReturnKeyWord }

DataStatus------------------------------------------------------------------------------------------
ما حالت عادی به این شکل می نوشتیم لایو دیتا رو
var notesData = MutableLiveData<List<NoteEntity>>()
که هیچ مشکلی نداره و کاملا درسته این سبک نوشتن
ولی یک روش بهتر هم برای مدیریت state ها مثل empty و ... وجود داره
که همه چیز رو خودمون دستی با شرط چک نکنیم
مثلا اگه خالی بود فلان چیز رو بفرس اگه پر بود فلان کارو کن و اینا
اینو میایم با یک کلاس کلی مدیریت میکنیم
مثل کلاس MyResponse توی بخش فلو
یه کلاس مشابه همون رو میایم برای دیتابیس هم درست میکنیم

